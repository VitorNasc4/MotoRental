version: '3.5'

services:
  db:
    image: postgres:latest
    container_name: db
    restart: always
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_USER=admin
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d db" ]
      interval: 10s
      timeout: 5s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 80s

  api:
    build:
      context: .
      dockerfile: ./src/MotoRental.API/Dockerfile
    image: api:dev
    container_name: api
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DB_HOST: db
      RABBITMQ_HOST: rabbitmq
    ports:
      - "5000:5000"

  consumer:
    build:
      context: .
      dockerfile: ./src/MotoRental.Messaging/Dockerfile
    image: consumer:dev
    container_name: consumer
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DB_HOST: db
      RABBITMQ_HOST: rabbitmq
    ports:
      - "5202:5202"

volumes:
  db:
  rabbitmq:
